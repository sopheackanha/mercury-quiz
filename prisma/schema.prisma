generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  username      String         @default("user")
  categoryStats CategoryStat[]
  quizzes       Quiz[]         @relation("UserQuizzes")
}

model Category {
  id            Int            @id @default(autoincrement())
  name          String
  description   String?
  image         String?
  quizzes       Quiz[]
  categoryStats CategoryStat[]
}

model Quiz {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  image       String?
  categoryId  Int
  category    Category   @relation(fields: [categoryId], references: [id])
  creatorId   Int
  creator     User       @relation("UserQuizzes", fields: [creatorId], references: [id])
  questions   Question[]
}

model Question {
  id         Int      @id @default(autoincrement())
  text       String
  difficulty String?
  quizId     Int
  quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options    Option[]
}

model Option {
  id         Int      @id @default(autoincrement())
  text       String
  isCorrect  Boolean
  questionId Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model CategoryStat {
  id           Int       @id @default(autoincrement())
  userId       Int
  user         User      @relation(fields: [userId], references: [id])
  categoryId   Int
  category     Category  @relation(fields: [categoryId], references: [id])
  attempts     Int       @default(0)
  completed    Int       @default(0)
  averageScore Float?
  lastAttempt  DateTime?

  @@unique([userId, categoryId])
}
